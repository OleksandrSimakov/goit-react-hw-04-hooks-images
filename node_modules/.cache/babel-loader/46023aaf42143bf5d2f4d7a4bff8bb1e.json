{"ast":null,"code":"import _toConsumableArray from\"/Users/sima/Documents/GitHub/goit-react-hw-04-hooks-images/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/sima/Documents/GitHub/goit-react-hw-04-hooks-images/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import'../App/App.css';import{useState,useEffect,useRef}from'react';import Searchbar from'../Searchbar/Searchbar';import{fetchImages}from'../../services/fetchImages';import ImageGallery from'../ImageGallery/ImageGallery';import ImageGalleryItem from'../ImageGalleryItem/ImageGalleryItem';import Button from'../Button/Button';import scrollTo from'../../services/scrollTo.js';import Spinner from'../Loader/Loader';import Modal from'../Modal/Modal';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function App(){var styles={img:{maxWidth:'calc(100vw - 48px)',maxHeight:'calc(100vh - 24px)'}};var _useState=useState(null),_useState2=_slicedToArray(_useState,2),searchQuery=_useState2[0],setSearchQuery=_useState2[1];var _useState3=useState('idle'),_useState4=_slicedToArray(_useState3,2),queryStatus=_useState4[0],setQueryStatus=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),images=_useState6[0],setImages=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),currentPage=_useState8[0],setCurrentPage=_useState8[1];var _useState9=useState(null),_useState10=_slicedToArray(_useState9,2),selectedImageSrc=_useState10[0],setSelectedImageSrc=_useState10[1];var _useState11=useState(null),_useState12=_slicedToArray(_useState11,2),selectedImageTags=_useState12[0],setSelectedImageTags=_useState12[1];var _useState13=useState(false),_useState14=_slicedToArray(_useState13,2),modalOpened=_useState14[0],setModalOpened=_useState14[1];var handleSubmit=function handleSubmit(searchQuery){setSearchQuery(searchQuery);setCurrentPage(1);};var isFirstRender=useRef(true);useEffect(function(){if(isFirstRender.current||searchQuery===''){isFirstRender.current=false;return;}setQueryStatus('pending');fetchImages(searchQuery,currentPage).then(function(result){setImages(function(prevState){return[].concat(_toConsumableArray(prevState),_toConsumableArray(result));});scrollTo();setQueryStatus('resolved');}).catch(function(error){return setQueryStatus('rejected');});},[currentPage,searchQuery]);var handleMoreBtnClick=function handleMoreBtnClick(e){e.preventDefault();setCurrentPage(function(prevState){return prevState+1;});};var handleImgClick=function handleImgClick(largeImageURL,tags){setSelectedImageSrc(largeImageURL);setSelectedImageTags(tags);setModalOpened(true);};var closeModal=function closeModal(){setModalOpened(false);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Searchbar,{onSubmit:handleSubmit}),/*#__PURE__*/_jsx(ImageGallery,{children:images.map(function(_ref){var id=_ref.id,webformatURL=_ref.webformatURL,tags=_ref.tags,largeImageURL=_ref.largeImageURL;return/*#__PURE__*/_jsx(ImageGalleryItem,{webformatURL:webformatURL,tags:tags,onImgClick:function onImgClick(){return handleImgClick(largeImageURL,tags);}},id);})}),queryStatus==='resolved'&&/*#__PURE__*/_jsx(Button,{handleMoreBtnClick:handleMoreBtnClick}),queryStatus==='pending'&&/*#__PURE__*/_jsx(Spinner,{}),modalOpened&&/*#__PURE__*/_jsx(Modal,{onClose:closeModal,children:/*#__PURE__*/_jsx(\"img\",{style:styles.img,src:selectedImageSrc,alt:selectedImageTags})})]});}// export default class App extends Component {\n//   state = {\n//     searchQuery: null,\n//     queryStatus: 'idle',\n//     images: [],\n//     currentPage: null,\n//     selectedImageSrc: null,\n//     selectedImageTags: null,\n//     modalOpened: false,\n//   }\n//   styles = {\n//     img: {\n//       maxWidth: 'calc(100vw - 48px)',\n//       maxHeight: 'calc(100vh - 24px)',\n//     },\n//   }\n//   handleSubmit = (searchQuery) => {\n//     this.setState({ searchQuery, currentPage: 1 })\n//   }\n//   async componentDidUpdate(_, prevState) {\n//     const { searchQuery, currentPage } = this.state\n//     const shouldFetch =\n//       (prevState.searchQuery !== searchQuery && searchQuery !== '') ||\n//       prevState.currentPage !== currentPage\n//     if (shouldFetch) {\n//       try {\n//         this.setState({ queryStatus: 'pending' })\n//         const images = await fetchImages(searchQuery, currentPage)\n//         this.setState((prevState) => ({\n//           queryStatus: 'resolved',\n//           images: [...prevState.images, ...images],\n//         }))\n//         scrollTo()\n//       } catch (error) {\n//         this.setState({ reqStatus: 'rejected' })\n//       }\n//     }\n//   }\n//   handleMoreBtnClick = (e) => {\n//     e.preventDefault()\n//     this.setState((prevState) => ({\n//       currentPage: prevState.currentPage + 1,\n//     }))\n//   }\n//   handleImgClick = (largeImageURL, tags) => {\n//     this.setState({\n//       selectedImageSrc: largeImageURL,\n//       selectedImageTags: tags,\n//       modalOpened: true,\n//     })\n//   }\n//   closeModal = () => {\n//     this.setState({ modalOpened: false })\n//   }\n//   render() {\n//     const {\n//       images,\n//       queryStatus,\n//       selectedImageSrc,\n//       selectedImageTags,\n//       modalOpened,\n//     } = this.state\n//     return (\n//       <>\n//         <Searchbar onSubmit={this.handleSubmit} />\n//         <ImageGallery>\n//           {images.map(({ id, webformatURL, tags, largeImageURL }) => (\n//             <ImageGalleryItem\n//               key={id}\n//               webformatURL={webformatURL}\n//               tags={tags}\n//               onImgClick={() => this.handleImgClick(largeImageURL, tags)}\n//             />\n//           ))}\n//         </ImageGallery>\n//         {queryStatus === 'resolved' && (\n//           <Button handleMoreBtnClick={this.handleMoreBtnClick} />\n//         )}\n//         {queryStatus === 'pending' && <Spinner />}\n//         {modalOpened && (\n//           <Modal onClose={this.closeModal}>\n//             <img\n//               style={this.styles.img}\n//               src={selectedImageSrc}\n//               alt={selectedImageTags}\n//             />\n//           </Modal>\n//         )}\n//       </>\n//     )\n//   }\n// }","map":{"version":3,"sources":["/Users/sima/Documents/GitHub/goit-react-hw-04-hooks-images/src/components/App/App.jsx"],"names":["useState","useEffect","useRef","Searchbar","fetchImages","ImageGallery","ImageGalleryItem","Button","scrollTo","Spinner","Modal","App","styles","img","maxWidth","maxHeight","searchQuery","setSearchQuery","queryStatus","setQueryStatus","images","setImages","currentPage","setCurrentPage","selectedImageSrc","setSelectedImageSrc","selectedImageTags","setSelectedImageTags","modalOpened","setModalOpened","handleSubmit","isFirstRender","current","then","result","prevState","catch","error","handleMoreBtnClick","e","preventDefault","handleImgClick","largeImageURL","tags","closeModal","map","id","webformatURL"],"mappings":"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GAAK,SAAhB,eAA6B,KAAC,OAAD,IAlBhC,CAoBGU,WAAW,eACV,KAAC,KAAD,EAAO,OAAO,CAAEgB,UAAhB,uBACE,YACE,KAAK,CAAEhC,MAAM,CAACC,GADhB,CAEE,GAAG,CAAEW,gBAFP,CAGE,GAAG,CAAEE,iBAHP,EADF,EArBJ,GADF,CAgCD,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import '../App/App.css'\nimport { useState, useEffect, useRef } from 'react'\nimport Searchbar from '../Searchbar/Searchbar'\nimport { fetchImages } from '../../services/fetchImages'\nimport ImageGallery from '../ImageGallery/ImageGallery'\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem'\nimport Button from '../Button/Button'\nimport scrollTo from '../../services/scrollTo.js'\nimport Spinner from '../Loader/Loader'\nimport Modal from '../Modal/Modal'\n\nexport default function App() {\n  const styles = {\n    img: {\n      maxWidth: 'calc(100vw - 48px)',\n      maxHeight: 'calc(100vh - 24px)',\n    },\n  }\n\n  const [searchQuery, setSearchQuery] = useState(null)\n  const [queryStatus, setQueryStatus] = useState('idle')\n  const [images, setImages] = useState([])\n  const [currentPage, setCurrentPage] = useState(null)\n  const [selectedImageSrc, setSelectedImageSrc] = useState(null)\n  const [selectedImageTags, setSelectedImageTags] = useState(null)\n  const [modalOpened, setModalOpened] = useState(false)\n\n  const handleSubmit = (searchQuery) => {\n    setSearchQuery(searchQuery)\n    setCurrentPage(1)\n  }\n\n  const isFirstRender = useRef(true)\n\n  useEffect(() => {\n    if (isFirstRender.current || searchQuery === '') {\n      isFirstRender.current = false\n      return\n    }\n\n    setQueryStatus('pending')\n\n    fetchImages(searchQuery, currentPage)\n      .then((result) => {\n        setImages((prevState) => [...prevState, ...result])\n        scrollTo()\n        setQueryStatus('resolved')\n      })\n      .catch((error) => setQueryStatus('rejected'))\n  }, [currentPage, searchQuery])\n\n  const handleMoreBtnClick = (e) => {\n    e.preventDefault()\n\n    setCurrentPage((prevState) => prevState + 1)\n  }\n\n  const handleImgClick = (largeImageURL, tags) => {\n    setSelectedImageSrc(largeImageURL)\n    setSelectedImageTags(tags)\n    setModalOpened(true)\n  }\n\n  const closeModal = () => {\n    setModalOpened(false)\n  }\n  return (\n    <>\n      <Searchbar onSubmit={handleSubmit} />\n\n      <ImageGallery>\n        {images.map(({ id, webformatURL, tags, largeImageURL }) => (\n          <ImageGalleryItem\n            key={id}\n            webformatURL={webformatURL}\n            tags={tags}\n            onImgClick={() => handleImgClick(largeImageURL, tags)}\n          />\n        ))}\n      </ImageGallery>\n\n      {queryStatus === 'resolved' && (\n        <Button handleMoreBtnClick={handleMoreBtnClick} />\n      )}\n\n      {queryStatus === 'pending' && <Spinner />}\n\n      {modalOpened && (\n        <Modal onClose={closeModal}>\n          <img\n            style={styles.img}\n            src={selectedImageSrc}\n            alt={selectedImageTags}\n          />\n        </Modal>\n      )}\n    </>\n  )\n}\n\n// export default class App extends Component {\n//   state = {\n//     searchQuery: null,\n//     queryStatus: 'idle',\n//     images: [],\n//     currentPage: null,\n//     selectedImageSrc: null,\n//     selectedImageTags: null,\n//     modalOpened: false,\n//   }\n\n//   styles = {\n//     img: {\n//       maxWidth: 'calc(100vw - 48px)',\n//       maxHeight: 'calc(100vh - 24px)',\n//     },\n//   }\n\n//   handleSubmit = (searchQuery) => {\n//     this.setState({ searchQuery, currentPage: 1 })\n//   }\n\n//   async componentDidUpdate(_, prevState) {\n//     const { searchQuery, currentPage } = this.state\n\n//     const shouldFetch =\n//       (prevState.searchQuery !== searchQuery && searchQuery !== '') ||\n//       prevState.currentPage !== currentPage\n\n//     if (shouldFetch) {\n//       try {\n//         this.setState({ queryStatus: 'pending' })\n\n//         const images = await fetchImages(searchQuery, currentPage)\n\n//         this.setState((prevState) => ({\n//           queryStatus: 'resolved',\n//           images: [...prevState.images, ...images],\n//         }))\n\n//         scrollTo()\n//       } catch (error) {\n//         this.setState({ reqStatus: 'rejected' })\n//       }\n//     }\n//   }\n\n//   handleMoreBtnClick = (e) => {\n//     e.preventDefault()\n\n//     this.setState((prevState) => ({\n//       currentPage: prevState.currentPage + 1,\n//     }))\n//   }\n\n//   handleImgClick = (largeImageURL, tags) => {\n//     this.setState({\n//       selectedImageSrc: largeImageURL,\n//       selectedImageTags: tags,\n//       modalOpened: true,\n//     })\n//   }\n\n//   closeModal = () => {\n//     this.setState({ modalOpened: false })\n//   }\n\n//   render() {\n//     const {\n//       images,\n//       queryStatus,\n//       selectedImageSrc,\n//       selectedImageTags,\n//       modalOpened,\n//     } = this.state\n\n//     return (\n//       <>\n//         <Searchbar onSubmit={this.handleSubmit} />\n\n//         <ImageGallery>\n//           {images.map(({ id, webformatURL, tags, largeImageURL }) => (\n//             <ImageGalleryItem\n//               key={id}\n//               webformatURL={webformatURL}\n//               tags={tags}\n//               onImgClick={() => this.handleImgClick(largeImageURL, tags)}\n//             />\n//           ))}\n//         </ImageGallery>\n\n//         {queryStatus === 'resolved' && (\n//           <Button handleMoreBtnClick={this.handleMoreBtnClick} />\n//         )}\n\n//         {queryStatus === 'pending' && <Spinner />}\n\n//         {modalOpened && (\n//           <Modal onClose={this.closeModal}>\n//             <img\n//               style={this.styles.img}\n//               src={selectedImageSrc}\n//               alt={selectedImageTags}\n//             />\n//           </Modal>\n//         )}\n//       </>\n//     )\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}