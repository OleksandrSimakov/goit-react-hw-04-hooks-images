{"ast":null,"code":"var _jsxFileName = \"/Users/sima/Documents/GitHub/goit-react-hw-04-hooks-images/src/components/App/App.jsx\",\n    _s = $RefreshSig$();\n\nimport '../App/App.css';\nimport { useState, useEffect } from 'react';\nimport Searchbar from '../Searchbar/Searchbar';\nimport { fetchImages } from '../../services/fetchImages';\nimport ImageGallery from '../ImageGallery/ImageGallery';\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem';\nimport Button from '../Button/Button';\nimport scrollTo from '../../services/scrollTo.js';\nimport Spinner from '../Loader/Loader';\nimport Modal from '../Modal/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const styles = {\n    img: {\n      maxWidth: 'calc(100vw - 48px)',\n      maxHeight: 'calc(100vh - 24px)'\n    }\n  }; //     searchQuery: null,\n  //     queryStatus: 'idle',\n  //     images: [],\n  //     currentPage: null,\n  //     selectedImageSrc: null,\n  //     selectedImageTags: null,\n  //     modalOpened: false,\n\n  const [searchQuery, setSearchQuery] = useState(null);\n  const [queryStatus, setQueryStatus] = useState('idle');\n  const [images, setImages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(null);\n\n  const handleSubmit = searchQuery => {\n    this.setState({\n      searchQuery,\n      currentPage: 1\n    });\n  };\n\n  async function componentDidUpdate(_, prevState) {\n    const {\n      searchQuery,\n      currentPage\n    } = this.state;\n    const shouldFetch = prevState.searchQuery !== searchQuery && searchQuery !== '' || prevState.currentPage !== currentPage;\n\n    if (shouldFetch) {\n      try {\n        this.setState({\n          queryStatus: 'pending'\n        });\n        const images = await fetchImages(searchQuery, currentPage);\n        this.setState(prevState => ({\n          queryStatus: 'resolved',\n          images: [...prevState.images, ...images]\n        }));\n        scrollTo();\n      } catch (error) {\n        this.setState({\n          reqStatus: 'rejected'\n        });\n      }\n    }\n  }\n\n  const handleMoreBtnClick = e => {\n    e.preventDefault();\n    this.setState(prevState => ({\n      currentPage: prevState.currentPage + 1\n    }));\n  };\n\n  const handleImgClick = (largeImageURL, tags) => {\n    this.setState({\n      selectedImageSrc: largeImageURL,\n      selectedImageTags: tags,\n      modalOpened: true\n    });\n  };\n\n  const closeModal = () => {\n    this.setState({\n      modalOpened: false\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Searchbar, {\n      onSubmit: this.handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageGallery, {\n      children: images.map(({\n        id,\n        webformatURL,\n        tags,\n        largeImageURL\n      }) => /*#__PURE__*/_jsxDEV(ImageGalleryItem, {\n        webformatURL: webformatURL,\n        tags: tags,\n        onImgClick: () => this.handleImgClick(largeImageURL, tags)\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), queryStatus === 'resolved' && /*#__PURE__*/_jsxDEV(Button, {\n      handleMoreBtnClick: this.handleMoreBtnClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), queryStatus === 'pending' && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 37\n    }, this), modalOpened && /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: this.closeModal,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        style: styles.img,\n        src: selectedImageSrc,\n        alt: selectedImageTags\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n} // export default class App extends Component {\n//   state = {\n//     searchQuery: null,\n//     queryStatus: 'idle',\n//     images: [],\n//     currentPage: null,\n//     selectedImageSrc: null,\n//     selectedImageTags: null,\n//     modalOpened: false,\n//   }\n//   styles = {\n//     img: {\n//       maxWidth: 'calc(100vw - 48px)',\n//       maxHeight: 'calc(100vh - 24px)',\n//     },\n//   }\n//   handleSubmit = (searchQuery) => {\n//     this.setState({ searchQuery, currentPage: 1 })\n//   }\n//   async componentDidUpdate(_, prevState) {\n//     const { searchQuery, currentPage } = this.state\n//     const shouldFetch =\n//       (prevState.searchQuery !== searchQuery && searchQuery !== '') ||\n//       prevState.currentPage !== currentPage\n//     if (shouldFetch) {\n//       try {\n//         this.setState({ queryStatus: 'pending' })\n//         const images = await fetchImages(searchQuery, currentPage)\n//         this.setState((prevState) => ({\n//           queryStatus: 'resolved',\n//           images: [...prevState.images, ...images],\n//         }))\n//         scrollTo()\n//       } catch (error) {\n//         this.setState({ reqStatus: 'rejected' })\n//       }\n//     }\n//   }\n//   handleMoreBtnClick = (e) => {\n//     e.preventDefault()\n//     this.setState((prevState) => ({\n//       currentPage: prevState.currentPage + 1,\n//     }))\n//   }\n//   handleImgClick = (largeImageURL, tags) => {\n//     this.setState({\n//       selectedImageSrc: largeImageURL,\n//       selectedImageTags: tags,\n//       modalOpened: true,\n//     })\n//   }\n//   closeModal = () => {\n//     this.setState({ modalOpened: false })\n//   }\n//   render() {\n//     const {\n//       images,\n//       queryStatus,\n//       selectedImageSrc,\n//       selectedImageTags,\n//       modalOpened,\n//     } = this.state\n//     return (\n//       <>\n//         <Searchbar onSubmit={this.handleSubmit} />\n//         <ImageGallery>\n//           {images.map(({ id, webformatURL, tags, largeImageURL }) => (\n//             <ImageGalleryItem\n//               key={id}\n//               webformatURL={webformatURL}\n//               tags={tags}\n//               onImgClick={() => this.handleImgClick(largeImageURL, tags)}\n//             />\n//           ))}\n//         </ImageGallery>\n//         {queryStatus === 'resolved' && (\n//           <Button handleMoreBtnClick={this.handleMoreBtnClick} />\n//         )}\n//         {queryStatus === 'pending' && <Spinner />}\n//         {modalOpened && (\n//           <Modal onClose={this.closeModal}>\n//             <img\n//               style={this.styles.img}\n//               src={selectedImageSrc}\n//               alt={selectedImageTags}\n//             />\n//           </Modal>\n//         )}\n//       </>\n//     )\n//   }\n// }\n\n_s(App, \"7Irw1Sb4zNhDPaRYYw/itTDaWEo=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sima/Documents/GitHub/goit-react-hw-04-hooks-images/src/components/App/App.jsx"],"names":["useState","useEffect","Searchbar","fetchImages","ImageGallery","ImageGalleryItem","Button","scrollTo","Spinner","Modal","App","styles","img","maxWidth","maxHeight","searchQuery","setSearchQuery","queryStatus","setQueryStatus","images","setImages","currentPage","setCurrentPage","handleSubmit","setState","componentDidUpdate","_","prevState","state","shouldFetch","error","reqStatus","handleMoreBtnClick","e","preventDefault","handleImgClick","largeImageURL","tags","selectedImageSrc","selectedImageTags","modalOpened","closeModal","map","id","webformatURL"],"mappings":"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,KAAKe;AAAjC;AAAA;AAAA;AAAA;AAAA,YAfJ,EAkBGf,WAAW,KAAK,SAAhB,iBAA6B,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAlBhC,EAoBGuB,WAAW,iBACV,QAAC,KAAD;AAAO,MAAA,OAAO,EAAE,KAAKC,UAArB;AAAA,6BACE;AACE,QAAA,KAAK,EAAE9B,MAAM,CAACC,GADhB;AAEE,QAAA,GAAG,EAAE0B,gBAFP;AAGE,QAAA,GAAG,EAAEC;AAHP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YArBJ;AAAA,kBADF;AAgCD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GApNwB7B,G;;KAAAA,G","sourcesContent":["import '../App/App.css'\nimport { useState, useEffect } from 'react'\nimport Searchbar from '../Searchbar/Searchbar'\nimport { fetchImages } from '../../services/fetchImages'\nimport ImageGallery from '../ImageGallery/ImageGallery'\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem'\nimport Button from '../Button/Button'\nimport scrollTo from '../../services/scrollTo.js'\nimport Spinner from '../Loader/Loader'\nimport Modal from '../Modal/Modal'\n\nexport default function App() {\n  const styles = {\n    img: {\n      maxWidth: 'calc(100vw - 48px)',\n      maxHeight: 'calc(100vh - 24px)',\n    },\n  }\n\n  //     searchQuery: null,\n  //     queryStatus: 'idle',\n  //     images: [],\n  //     currentPage: null,\n  //     selectedImageSrc: null,\n  //     selectedImageTags: null,\n  //     modalOpened: false,\n\n  const [searchQuery, setSearchQuery] = useState(null)\n  const [queryStatus, setQueryStatus] = useState('idle')\n  const [images, setImages] = useState([])\n  const [currentPage, setCurrentPage] = useState(null)\n\n  const handleSubmit = (searchQuery) => {\n    this.setState({ searchQuery, currentPage: 1 })\n  }\n\n  async function componentDidUpdate(_, prevState) {\n    const { searchQuery, currentPage } = this.state\n\n    const shouldFetch =\n      (prevState.searchQuery !== searchQuery && searchQuery !== '') ||\n      prevState.currentPage !== currentPage\n\n    if (shouldFetch) {\n      try {\n        this.setState({ queryStatus: 'pending' })\n\n        const images = await fetchImages(searchQuery, currentPage)\n\n        this.setState((prevState) => ({\n          queryStatus: 'resolved',\n          images: [...prevState.images, ...images],\n        }))\n\n        scrollTo()\n      } catch (error) {\n        this.setState({ reqStatus: 'rejected' })\n      }\n    }\n  }\n\n  const handleMoreBtnClick = (e) => {\n    e.preventDefault()\n\n    this.setState((prevState) => ({\n      currentPage: prevState.currentPage + 1,\n    }))\n  }\n\n  const handleImgClick = (largeImageURL, tags) => {\n    this.setState({\n      selectedImageSrc: largeImageURL,\n      selectedImageTags: tags,\n      modalOpened: true,\n    })\n  }\n\n  const closeModal = () => {\n    this.setState({ modalOpened: false })\n  }\n  return (\n    <>\n      <Searchbar onSubmit={this.handleSubmit} />\n\n      <ImageGallery>\n        {images.map(({ id, webformatURL, tags, largeImageURL }) => (\n          <ImageGalleryItem\n            key={id}\n            webformatURL={webformatURL}\n            tags={tags}\n            onImgClick={() => this.handleImgClick(largeImageURL, tags)}\n          />\n        ))}\n      </ImageGallery>\n\n      {queryStatus === 'resolved' && (\n        <Button handleMoreBtnClick={this.handleMoreBtnClick} />\n      )}\n\n      {queryStatus === 'pending' && <Spinner />}\n\n      {modalOpened && (\n        <Modal onClose={this.closeModal}>\n          <img\n            style={styles.img}\n            src={selectedImageSrc}\n            alt={selectedImageTags}\n          />\n        </Modal>\n      )}\n    </>\n  )\n}\n\n// export default class App extends Component {\n//   state = {\n//     searchQuery: null,\n//     queryStatus: 'idle',\n//     images: [],\n//     currentPage: null,\n//     selectedImageSrc: null,\n//     selectedImageTags: null,\n//     modalOpened: false,\n//   }\n\n//   styles = {\n//     img: {\n//       maxWidth: 'calc(100vw - 48px)',\n//       maxHeight: 'calc(100vh - 24px)',\n//     },\n//   }\n\n//   handleSubmit = (searchQuery) => {\n//     this.setState({ searchQuery, currentPage: 1 })\n//   }\n\n//   async componentDidUpdate(_, prevState) {\n//     const { searchQuery, currentPage } = this.state\n\n//     const shouldFetch =\n//       (prevState.searchQuery !== searchQuery && searchQuery !== '') ||\n//       prevState.currentPage !== currentPage\n\n//     if (shouldFetch) {\n//       try {\n//         this.setState({ queryStatus: 'pending' })\n\n//         const images = await fetchImages(searchQuery, currentPage)\n\n//         this.setState((prevState) => ({\n//           queryStatus: 'resolved',\n//           images: [...prevState.images, ...images],\n//         }))\n\n//         scrollTo()\n//       } catch (error) {\n//         this.setState({ reqStatus: 'rejected' })\n//       }\n//     }\n//   }\n\n//   handleMoreBtnClick = (e) => {\n//     e.preventDefault()\n\n//     this.setState((prevState) => ({\n//       currentPage: prevState.currentPage + 1,\n//     }))\n//   }\n\n//   handleImgClick = (largeImageURL, tags) => {\n//     this.setState({\n//       selectedImageSrc: largeImageURL,\n//       selectedImageTags: tags,\n//       modalOpened: true,\n//     })\n//   }\n\n//   closeModal = () => {\n//     this.setState({ modalOpened: false })\n//   }\n\n//   render() {\n//     const {\n//       images,\n//       queryStatus,\n//       selectedImageSrc,\n//       selectedImageTags,\n//       modalOpened,\n//     } = this.state\n\n//     return (\n//       <>\n//         <Searchbar onSubmit={this.handleSubmit} />\n\n//         <ImageGallery>\n//           {images.map(({ id, webformatURL, tags, largeImageURL }) => (\n//             <ImageGalleryItem\n//               key={id}\n//               webformatURL={webformatURL}\n//               tags={tags}\n//               onImgClick={() => this.handleImgClick(largeImageURL, tags)}\n//             />\n//           ))}\n//         </ImageGallery>\n\n//         {queryStatus === 'resolved' && (\n//           <Button handleMoreBtnClick={this.handleMoreBtnClick} />\n//         )}\n\n//         {queryStatus === 'pending' && <Spinner />}\n\n//         {modalOpened && (\n//           <Modal onClose={this.closeModal}>\n//             <img\n//               style={this.styles.img}\n//               src={selectedImageSrc}\n//               alt={selectedImageTags}\n//             />\n//           </Modal>\n//         )}\n//       </>\n//     )\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}