{"ast":null,"code":"var _jsxFileName = \"/Users/sima/Documents/GitHub/goit-react-hw-04-hooks-images/src/components/App/App.jsx\",\n    _s = $RefreshSig$();\n\nimport '../App/App.css';\nimport { useState, useEffect } from 'react';\nimport Searchbar from '../Searchbar/Searchbar';\nimport { fetchImages } from '../../services/fetchImages';\nimport ImageGallery from '../ImageGallery/ImageGallery';\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem';\nimport Button from '../Button/Button';\nimport scrollTo from '../../services/scrollTo.js';\nimport Spinner from '../Loader/Loader';\nimport Modal from '../Modal/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const styles = {\n    img: {\n      maxWidth: 'calc(100vw - 48px)',\n      maxHeight: 'calc(100vh - 24px)'\n    }\n  };\n  const [searchQuery, setSearchQuery] = useState('');\n  const [queryStatus, setQueryStatus] = useState('idle');\n  const [images, setImages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(null);\n  const [selectedImageSrc, setSelectedImageSrc] = useState(null);\n  const [selectedImageTags, setSelectedImageTags] = useState(null);\n  const [modalOpened, setModalOpened] = useState(false);\n\n  const handleSubmit = searchQuery => {\n    setSearchQuery(searchQuery);\n    setCurrentPage(1);\n  };\n\n  useEffect(() => {\n    if (searchQuery === '') {\n      return;\n    }\n\n    setQueryStatus('pending');\n\n    if (currentPage === 1) {\n      setImages([]);\n    }\n\n    fetchImages(searchQuery, currentPage).then(result => {\n      setImages(prevState => [...prevState, ...result]);\n      scrollTo();\n      setQueryStatus('resolved');\n    }).catch(error => setQueryStatus('rejected'));\n  }, [currentPage, searchQuery]);\n\n  const handleMoreBtnClick = e => {\n    e.preventDefault();\n    setCurrentPage(prevState => prevState + 1);\n  };\n\n  const handleImgClick = (largeImageURL, tags) => {\n    setSelectedImageSrc(largeImageURL);\n    setSelectedImageTags(tags);\n    setModalOpened(true);\n  };\n\n  const closeModal = () => {\n    setModalOpened(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Searchbar, {\n      onSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), images.length > 0 && /*#__PURE__*/_jsxDEV(ImageGallery, {\n      children: images.map(({\n        id,\n        webformatURL,\n        tags,\n        largeImageURL\n      }) => /*#__PURE__*/_jsxDEV(ImageGalleryItem, {\n        webformatURL: webformatURL,\n        tags: tags,\n        onImgClick: () => handleImgClick(largeImageURL, tags)\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), queryStatus === 'resolved' && /*#__PURE__*/_jsxDEV(Button, {\n      handleMoreBtnClick: handleMoreBtnClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), queryStatus === 'pending' && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 37\n    }, this), modalOpened && /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: closeModal,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        style: styles.img,\n        src: selectedImageSrc,\n        alt: selectedImageTags\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n} // export default class App extends Component {\n//   state = {\n//     searchQuery: null,\n//     queryStatus: 'idle',\n//     images: [],\n//     currentPage: null,\n//     selectedImageSrc: null,\n//     selectedImageTags: null,\n//     modalOpened: false,\n//   }\n//   styles = {\n//     img: {\n//       maxWidth: 'calc(100vw - 48px)',\n//       maxHeight: 'calc(100vh - 24px)',\n//     },\n//   }\n//   handleSubmit = (searchQuery) => {\n//     this.setState({ searchQuery, currentPage: 1 })\n//   }\n//   async componentDidUpdate(_, prevState) {\n//     const { searchQuery, currentPage } = this.state\n//     const shouldFetch =\n//       (prevState.searchQuery !== searchQuery && searchQuery !== '') ||\n//       prevState.currentPage !== currentPage\n//     if (shouldFetch) {\n//       try {\n//         this.setState({ queryStatus: 'pending' })\n//         const images = await fetchImages(searchQuery, currentPage)\n//         this.setState((prevState) => ({\n//           queryStatus: 'resolved',\n//           images: [...prevState.images, ...images],\n//         }))\n//         scrollTo()\n//       } catch (error) {\n//         this.setState({ reqStatus: 'rejected' })\n//       }\n//     }\n//   }\n//   handleMoreBtnClick = (e) => {\n//     e.preventDefault()\n//     this.setState((prevState) => ({\n//       currentPage: prevState.currentPage + 1,\n//     }))\n//   }\n//   handleImgClick = (largeImageURL, tags) => {\n//     this.setState({\n//       selectedImageSrc: largeImageURL,\n//       selectedImageTags: tags,\n//       modalOpened: true,\n//     })\n//   }\n//   closeModal = () => {\n//     this.setState({ modalOpened: false })\n//   }\n//   render() {\n//     const {\n//       images,\n//       queryStatus,\n//       selectedImageSrc,\n//       selectedImageTags,\n//       modalOpened,\n//     } = this.state\n//     return (\n//       <>\n//         <Searchbar onSubmit={this.handleSubmit} />\n//         <ImageGallery>\n//           {images.map(({ id, webformatURL, tags, largeImageURL }) => (\n//             <ImageGalleryItem\n//               key={id}\n//               webformatURL={webformatURL}\n//               tags={tags}\n//               onImgClick={() => this.handleImgClick(largeImageURL, tags)}\n//             />\n//           ))}\n//         </ImageGallery>\n//         {queryStatus === 'resolved' && (\n//           <Button handleMoreBtnClick={this.handleMoreBtnClick} />\n//         )}\n//         {queryStatus === 'pending' && <Spinner />}\n//         {modalOpened && (\n//           <Modal onClose={this.closeModal}>\n//             <img\n//               style={this.styles.img}\n//               src={selectedImageSrc}\n//               alt={selectedImageTags}\n//             />\n//           </Modal>\n//         )}\n//       </>\n//     )\n//   }\n// }\n\n_s(App, \"9plf+dVCmmMuDkGHCnrHmn9ux80=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sima/Documents/GitHub/goit-react-hw-04-hooks-images/src/components/App/App.jsx"],"names":["useState","useEffect","Searchbar","fetchImages","ImageGallery","ImageGalleryItem","Button","scrollTo","Spinner","Modal","App","styles","img","maxWidth","maxHeight","searchQuery","setSearchQuery","queryStatus","setQueryStatus","images","setImages","currentPage","setCurrentPage","selectedImageSrc","setSelectedImageSrc","selectedImageTags","setSelectedImageTags","modalOpened","setModalOpened","handleSubmit","then","result","prevState","catch","error","handleMoreBtnClick","e","preventDefault","handleImgClick","largeImageURL","tags","closeModal","length","map","id","webformatURL"],"mappings":"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WAAW,KAAK,SAAhB,iBAA6B,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YApBhC,EAsBGU,WAAW,iBACV,QAAC,KAAD;AAAO,MAAA,OAAO,EAAEc,UAAhB;AAAA,6BACE;AACE,QAAA,KAAK,EAAE9B,MAAM,CAACC,GADhB;AAEE,QAAA,GAAG,EAAEW,gBAFP;AAGE,QAAA,GAAG,EAAEE;AAHP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAvBJ;AAAA,kBADF;AAkCD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAxMwBf,G;;KAAAA,G","sourcesContent":["import '../App/App.css'\nimport { useState, useEffect } from 'react'\nimport Searchbar from '../Searchbar/Searchbar'\nimport { fetchImages } from '../../services/fetchImages'\nimport ImageGallery from '../ImageGallery/ImageGallery'\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem'\nimport Button from '../Button/Button'\nimport scrollTo from '../../services/scrollTo.js'\nimport Spinner from '../Loader/Loader'\nimport Modal from '../Modal/Modal'\n\nexport default function App() {\n  const styles = {\n    img: {\n      maxWidth: 'calc(100vw - 48px)',\n      maxHeight: 'calc(100vh - 24px)',\n    },\n  }\n\n  const [searchQuery, setSearchQuery] = useState('')\n  const [queryStatus, setQueryStatus] = useState('idle')\n  const [images, setImages] = useState([])\n  const [currentPage, setCurrentPage] = useState(null)\n  const [selectedImageSrc, setSelectedImageSrc] = useState(null)\n  const [selectedImageTags, setSelectedImageTags] = useState(null)\n  const [modalOpened, setModalOpened] = useState(false)\n\n  const handleSubmit = (searchQuery) => {\n    setSearchQuery(searchQuery)\n    setCurrentPage(1)\n  }\n\n  useEffect(() => {\n    if (searchQuery === '') {\n      return\n    }\n\n    setQueryStatus('pending')\n    if (currentPage === 1) {\n      setImages([])\n    }\n\n    fetchImages(searchQuery, currentPage)\n      .then((result) => {\n        setImages((prevState) => [...prevState, ...result])\n        scrollTo()\n        setQueryStatus('resolved')\n      })\n      .catch((error) => setQueryStatus('rejected'))\n  }, [currentPage, searchQuery])\n\n  const handleMoreBtnClick = (e) => {\n    e.preventDefault()\n\n    setCurrentPage((prevState) => prevState + 1)\n  }\n\n  const handleImgClick = (largeImageURL, tags) => {\n    setSelectedImageSrc(largeImageURL)\n    setSelectedImageTags(tags)\n    setModalOpened(true)\n  }\n\n  const closeModal = () => {\n    setModalOpened(false)\n  }\n  return (\n    <>\n      <Searchbar onSubmit={handleSubmit} />\n\n      {images.length > 0 && (\n        <ImageGallery>\n          {images.map(({ id, webformatURL, tags, largeImageURL }) => (\n            <ImageGalleryItem\n              key={id}\n              webformatURL={webformatURL}\n              tags={tags}\n              onImgClick={() => handleImgClick(largeImageURL, tags)}\n            />\n          ))}\n        </ImageGallery>\n      )}\n\n      {queryStatus === 'resolved' && (\n        <Button handleMoreBtnClick={handleMoreBtnClick} />\n      )}\n\n      {queryStatus === 'pending' && <Spinner />}\n\n      {modalOpened && (\n        <Modal onClose={closeModal}>\n          <img\n            style={styles.img}\n            src={selectedImageSrc}\n            alt={selectedImageTags}\n          />\n        </Modal>\n      )}\n    </>\n  )\n}\n\n// export default class App extends Component {\n//   state = {\n//     searchQuery: null,\n//     queryStatus: 'idle',\n//     images: [],\n//     currentPage: null,\n//     selectedImageSrc: null,\n//     selectedImageTags: null,\n//     modalOpened: false,\n//   }\n\n//   styles = {\n//     img: {\n//       maxWidth: 'calc(100vw - 48px)',\n//       maxHeight: 'calc(100vh - 24px)',\n//     },\n//   }\n\n//   handleSubmit = (searchQuery) => {\n//     this.setState({ searchQuery, currentPage: 1 })\n//   }\n\n//   async componentDidUpdate(_, prevState) {\n//     const { searchQuery, currentPage } = this.state\n\n//     const shouldFetch =\n//       (prevState.searchQuery !== searchQuery && searchQuery !== '') ||\n//       prevState.currentPage !== currentPage\n\n//     if (shouldFetch) {\n//       try {\n//         this.setState({ queryStatus: 'pending' })\n\n//         const images = await fetchImages(searchQuery, currentPage)\n\n//         this.setState((prevState) => ({\n//           queryStatus: 'resolved',\n//           images: [...prevState.images, ...images],\n//         }))\n\n//         scrollTo()\n//       } catch (error) {\n//         this.setState({ reqStatus: 'rejected' })\n//       }\n//     }\n//   }\n\n//   handleMoreBtnClick = (e) => {\n//     e.preventDefault()\n\n//     this.setState((prevState) => ({\n//       currentPage: prevState.currentPage + 1,\n//     }))\n//   }\n\n//   handleImgClick = (largeImageURL, tags) => {\n//     this.setState({\n//       selectedImageSrc: largeImageURL,\n//       selectedImageTags: tags,\n//       modalOpened: true,\n//     })\n//   }\n\n//   closeModal = () => {\n//     this.setState({ modalOpened: false })\n//   }\n\n//   render() {\n//     const {\n//       images,\n//       queryStatus,\n//       selectedImageSrc,\n//       selectedImageTags,\n//       modalOpened,\n//     } = this.state\n\n//     return (\n//       <>\n//         <Searchbar onSubmit={this.handleSubmit} />\n\n//         <ImageGallery>\n//           {images.map(({ id, webformatURL, tags, largeImageURL }) => (\n//             <ImageGalleryItem\n//               key={id}\n//               webformatURL={webformatURL}\n//               tags={tags}\n//               onImgClick={() => this.handleImgClick(largeImageURL, tags)}\n//             />\n//           ))}\n//         </ImageGallery>\n\n//         {queryStatus === 'resolved' && (\n//           <Button handleMoreBtnClick={this.handleMoreBtnClick} />\n//         )}\n\n//         {queryStatus === 'pending' && <Spinner />}\n\n//         {modalOpened && (\n//           <Modal onClose={this.closeModal}>\n//             <img\n//               style={this.styles.img}\n//               src={selectedImageSrc}\n//               alt={selectedImageTags}\n//             />\n//           </Modal>\n//         )}\n//       </>\n//     )\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}