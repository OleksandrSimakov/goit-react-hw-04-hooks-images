{"ast":null,"code":"var _jsxFileName = \"/Users/sima/Documents/GitHub/goit-react-hw-04-hooks-images/src/components/App/App.js\";\nimport '../App/App.css';\nimport { useState, useEffect } from 'react';\nimport Searchbar from '../Searchbar/Searchbar';\nimport { fetchImages } from '../../services/fetchImages';\nimport ImageGallery from '../ImageGallery/ImageGallery';\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem';\nimport Button from '../Button/Button';\nimport scrollTo from '../../services/scrollTo.js';\nimport Spinner from '../Loader/Loader';\nimport Modal from '../Modal/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchQuery: null,\n      queryStatus: 'idle',\n      images: [],\n      currentPage: null,\n      selectedImageSrc: null,\n      selectedImageTags: null,\n      modalOpened: false\n    };\n    this.styles = {\n      img: {\n        maxWidth: 'calc(100vw - 48px)',\n        maxHeight: 'calc(100vh - 24px)'\n      }\n    };\n\n    this.handleSubmit = searchQuery => {\n      this.setState({\n        searchQuery,\n        currentPage: 1\n      });\n    };\n\n    this.handleMoreBtnClick = e => {\n      e.preventDefault();\n      this.setState(prevState => ({\n        currentPage: prevState.currentPage + 1\n      }));\n    };\n\n    this.handleImgClick = (largeImageURL, tags) => {\n      this.setState({\n        selectedImageSrc: largeImageURL,\n        selectedImageTags: tags,\n        modalOpened: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        modalOpened: false\n      });\n    };\n  }\n\n  async componentDidUpdate(_, prevState) {\n    const {\n      searchQuery,\n      currentPage\n    } = this.state;\n    const shouldFetch = prevState.searchQuery !== searchQuery && searchQuery !== '' || prevState.currentPage !== currentPage;\n\n    if (shouldFetch) {\n      try {\n        this.setState({\n          queryStatus: 'pending'\n        });\n        const images = await fetchImages(searchQuery, currentPage);\n        this.setState(prevState => ({\n          queryStatus: 'resolved',\n          images: [...prevState.images, ...images]\n        }));\n        scrollTo();\n      } catch (error) {\n        this.setState({\n          reqStatus: 'rejected'\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      images,\n      queryStatus,\n      selectedImageSrc,\n      selectedImageTags,\n      modalOpened\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Searchbar, {\n        onSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageGallery, {\n        children: images.map(({\n          id,\n          webformatURL,\n          tags,\n          largeImageURL\n        }) => /*#__PURE__*/_jsxDEV(ImageGalleryItem, {\n          webformatURL: webformatURL,\n          tags: tags,\n          onImgClick: () => this.handleImgClick(largeImageURL, tags)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), queryStatus === 'resolved' && /*#__PURE__*/_jsxDEV(Button, {\n        handleMoreBtnClick: this.handleMoreBtnClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), queryStatus === 'pending' && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 39\n      }, this), modalOpened && /*#__PURE__*/_jsxDEV(Modal, {\n        onClose: this.closeModal,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          style: this.styles.img,\n          src: selectedImageSrc,\n          alt: selectedImageTags\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["/Users/sima/Documents/GitHub/goit-react-hw-04-hooks-images/src/components/App/App.js"],"names":["useState","useEffect","Searchbar","fetchImages","ImageGallery","ImageGalleryItem","Button","scrollTo","Spinner","Modal","App","Component","state","searchQuery","queryStatus","images","currentPage","selectedImageSrc","selectedImageTags","modalOpened","styles","img","maxWidth","maxHeight","handleSubmit","setState","handleMoreBtnClick","e","preventDefault","prevState","handleImgClick","largeImageURL","tags","closeModal","componentDidUpdate","_","shouldFetch","error","reqStatus","render","map","id","webformatURL"],"mappings":"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","sourcesContent":["import '../App/App.css'\nimport { useState, useEffect } from 'react'\nimport Searchbar from '../Searchbar/Searchbar'\nimport { fetchImages } from '../../services/fetchImages'\nimport ImageGallery from '../ImageGallery/ImageGallery'\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem'\nimport Button from '../Button/Button'\nimport scrollTo from '../../services/scrollTo.js'\nimport Spinner from '../Loader/Loader'\nimport Modal from '../Modal/Modal'\n\nexport default class App extends Component {\n  state = {\n    searchQuery: null,\n    queryStatus: 'idle',\n    images: [],\n    currentPage: null,\n    selectedImageSrc: null,\n    selectedImageTags: null,\n    modalOpened: false,\n  }\n\n  styles = {\n    img: {\n      maxWidth: 'calc(100vw - 48px)',\n      maxHeight: 'calc(100vh - 24px)',\n    },\n  }\n\n  handleSubmit = (searchQuery) => {\n    this.setState({ searchQuery, currentPage: 1 })\n  }\n\n  async componentDidUpdate(_, prevState) {\n    const { searchQuery, currentPage } = this.state\n\n    const shouldFetch =\n      (prevState.searchQuery !== searchQuery && searchQuery !== '') ||\n      prevState.currentPage !== currentPage\n\n    if (shouldFetch) {\n      try {\n        this.setState({ queryStatus: 'pending' })\n\n        const images = await fetchImages(searchQuery, currentPage)\n\n        this.setState((prevState) => ({\n          queryStatus: 'resolved',\n          images: [...prevState.images, ...images],\n        }))\n\n        scrollTo()\n      } catch (error) {\n        this.setState({ reqStatus: 'rejected' })\n      }\n    }\n  }\n\n  handleMoreBtnClick = (e) => {\n    e.preventDefault()\n\n    this.setState((prevState) => ({\n      currentPage: prevState.currentPage + 1,\n    }))\n  }\n\n  handleImgClick = (largeImageURL, tags) => {\n    this.setState({\n      selectedImageSrc: largeImageURL,\n      selectedImageTags: tags,\n      modalOpened: true,\n    })\n  }\n\n  closeModal = () => {\n    this.setState({ modalOpened: false })\n  }\n\n  render() {\n    const {\n      images,\n      queryStatus,\n      selectedImageSrc,\n      selectedImageTags,\n      modalOpened,\n    } = this.state\n\n    return (\n      <>\n        <Searchbar onSubmit={this.handleSubmit} />\n\n        <ImageGallery>\n          {images.map(({ id, webformatURL, tags, largeImageURL }) => (\n            <ImageGalleryItem\n              key={id}\n              webformatURL={webformatURL}\n              tags={tags}\n              onImgClick={() => this.handleImgClick(largeImageURL, tags)}\n            />\n          ))}\n        </ImageGallery>\n\n        {queryStatus === 'resolved' && (\n          <Button handleMoreBtnClick={this.handleMoreBtnClick} />\n        )}\n\n        {queryStatus === 'pending' && <Spinner />}\n\n        {modalOpened && (\n          <Modal onClose={this.closeModal}>\n            <img\n              style={this.styles.img}\n              src={selectedImageSrc}\n              alt={selectedImageTags}\n            />\n          </Modal>\n        )}\n      </>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}